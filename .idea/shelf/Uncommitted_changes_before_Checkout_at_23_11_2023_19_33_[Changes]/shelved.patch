Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import Flask\r\nfrom flask_login import current_user\r\nfrom flask_principal import identity_loaded, RoleNeed\r\n\r\nfrom encryption import bcrypt\r\nfrom extensions import log_manager, principal\r\nfrom config import DATABASE_USER, DATABASE_PASSWORD, DATABASE_NAME, DATABASE_HOST, DATABASE_PORT\r\nfrom users import users_bp\r\nfrom admins import admins_bp\r\nfrom other_routes import other_bp\r\n\r\n\r\n# Create the Flask application\r\napp = Flask(__name__)\r\napp.config['SECRET_KEY'] = 'SUS'  # Replace with a strong, random secret key\r\n\r\napp.config['DATABASE_USER'] = DATABASE_USER\r\napp.config['DATABASE_PASSWORD'] = DATABASE_PASSWORD\r\napp.config['DATABASE_NAME'] = DATABASE_NAME\r\napp.config['DATABASE_HOST'] = DATABASE_HOST\r\napp.config['DATABASE_PORT'] = DATABASE_PORT\r\n\r\n\r\napp.register_blueprint(users_bp)\r\napp.register_blueprint(admins_bp)\r\napp.register_blueprint(other_bp)\r\n\r\n# rozszerzenia\r\nlog_manager.init_app(app)\r\nprincipal.init_app(app)\r\nbcrypt.init_app(app)\r\n\r\n###########################################################\r\n@identity_loaded.connect_via(app)\r\ndef on_identity_loaded(sender, identity):\r\n    print(\"chuj\")\r\n    if hasattr(current_user, 'roles'):\r\n        for role in current_user.roles:\r\n            identity.provides.add(RoleNeed(role))\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True)\r\n\r\n\r\n\r\n# todo wybór genre w add movie nie jest dynamiczny i nie sprzężony z bazą danych, trzeba zdecydować czy zmienić\r\n\r\n# todo user ma dostep do admin panel i to jest źle\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	
+++ b/main.py	
@@ -33,7 +33,6 @@
 ###########################################################
 @identity_loaded.connect_via(app)
 def on_identity_loaded(sender, identity):
-    print("chuj")
     if hasattr(current_user, 'roles'):
         for role in current_user.roles:
             identity.provides.add(RoleNeed(role))
